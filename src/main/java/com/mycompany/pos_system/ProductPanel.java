/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.pos_system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ProductPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProductPanel
     */
    DefaultTableModel model;
    public ProductPanel() {
        initComponents();
        model =(DefaultTableModel) jtProductList.getModel();
        showData();
        addCategoryItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPrice = new javax.swing.JTextField();
        txtDesc = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        cboCategory = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductList = new javax.swing.JTable();
        txtQty = new javax.swing.JSpinner();

        setPreferredSize(new java.awt.Dimension(700, 528));

        txtPrice.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        txtDesc.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        btnAdd.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        cboCategory.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        btnDelete.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel9.setText("Product Name");

        jLabel10.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel10.setText("Description");

        jLabel11.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel11.setText("Categogry");

        jLabel12.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel12.setText("Price");

        jLabel13.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel13.setText("Quantity");

        txtName.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        txtName.setMinimumSize(null);

        jtProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Category", "Price", "Quantity", "Decription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtProductList.setMaximumSize(new java.awt.Dimension(592, 398));
        jtProductList.setMinimumSize(new java.awt.Dimension(592, 398));
        jScrollPane1.setViewportView(jtProductList);

        txtQty.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        txtQty.setMaximumSize(new java.awt.Dimension(160, 30));
        txtQty.setMinimumSize(new java.awt.Dimension(160, 30));
        txtQty.setPreferredSize(new java.awt.Dimension(160, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDesc)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboCategory, 0, 175, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(txtPrice))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtQty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(btnEdit)
                            .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addCategoryItem(){
            Connection con = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            try {
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("SELECT category_name FROM tblproductcategory;");
            rs = stmt.executeQuery();
            while (rs.next()) {
                cboCategory.addItem(rs.getString("category_name"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            }
        }
    }
    private void showData() {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        con = DB_Connection.getConnection();
        stmt = con.prepareStatement("""
                                    SELECT 
                                        p.product_id,
                                        p.product_name,
                                        c.category_name,
                                        p.qty_in_stock,
                                        p.unit_price,
                                        p.description
                                    FROM 
                                        tblproduct p
                                    LEFT JOIN 
                                        tblproductcategory c ON p.category_id = c.category_id;""");
        
        rs = stmt.executeQuery();
        while (rs.next()) {
            int id = rs.getInt("product_id");
            String name = rs.getString("product_name");
            String categoryname = rs.getString("category_name");
            float price = rs.getFloat("unit_price");
            int qty = rs.getInt("qty_in_stock");
            String desc = rs.getString("description");

            Object[] rowData = {id, name, categoryname, price, qty, desc};
            model.addRow(rowData);
            
        }
    } catch (SQLException ex) {
        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        }
    }
}

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        if( txtName.getText().equals("")||
            txtPrice.getText().equals("")||
            txtQty.getValue().equals("")){
            JOptionPane.showMessageDialog(this, "Please Fill in the information");
        }else{
            Connection con = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            try {
                int categoryID=0;
                if(btnAdd.getText().equals("Add")){
                    String name = txtName.getText().trim();
                    String categoryName = cboCategory.getSelectedItem().toString();
                    try {
                    con = DB_Connection.getConnection();
                    stmt = con.prepareStatement("SELECT category_id FROM tblproductcategory where category_name = ?;");
                    stmt.setString( 1 , categoryName);
                    rs = stmt.executeQuery();
                    while (rs.next()) {
                        categoryID = rs.getInt("category_id");
                    }
                    } catch (SQLException ex) {
                        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                    } 
                    float price = Float.parseFloat(txtPrice.getText().trim());
                    int qty = Integer.parseInt(txtQty.getValue().toString());
                    String desc = txtDesc.getText().trim();


//                    Connection con=DriverManager.getConnection(  
//                    "jdbc:mysql://localhost:3306/pos_system_db","root","");  
                    con = DB_Connection.getConnection();
                    stmt=con.prepareStatement("INSERT tblproduct (product_name, category_id, unit_price, qty_in_stock,  description) VALUES (?,?,?,?,?);");
                    
                    stmt.setString(1, name);
                    stmt.setInt(2, categoryID);
                    stmt.setFloat(3, price);
                    stmt.setInt(4, qty);
                    stmt.setString(5, desc);
                    
                    stmt.execute();
                    
                    model.setRowCount(0);

                    showData();

                    // After adding or updating data, you can also scroll to the last row
                    if (model.getRowCount() > 0) {
                        jtProductList.scrollRectToVisible(jtProductList.getCellRect(model.getRowCount() - 1, 0, true));
                    }

                    JOptionPane.showMessageDialog(this, "Product has been added successfully");
                    clear();
                }else{
                    updateProduct();
                }
                
            } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                }
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed
    private void updateProduct() {
    int selectedIndex = jtProductList.getSelectedRow();
    if(selectedIndex != -1){
        Connection con = null;
        PreparedStatement stmt = null;  
        ResultSet rs = null;
        int productId =Integer.parseInt(jtProductList.getValueAt(selectedIndex, 0).toString());
        
        String name = txtName.getText().trim();
        int categoryID=0;
        String categoryName = cboCategory.getSelectedItem().toString();
                try {
                    con = DB_Connection.getConnection();
                    stmt = con.prepareStatement("SELECT category_id FROM tblproductcategory where category_name = ?;");
                    stmt.setString( 1 , categoryName);
                    rs = stmt.executeQuery();
                    while (rs.next()) {
                        categoryID = rs.getInt("category_id");
                    }
                    } catch (SQLException ex) {
                        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                    } 
        float price = Float.parseFloat(txtPrice.getText().trim());
        int qty = Integer.parseInt(txtQty.getValue().toString());
        String desc = txtDesc.getText().trim();
        
        try {
        
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("UPDATE tblproduct SET product_name=?, category_id=?, unit_price=?, qty_in_stock=?, description=? WHERE product_id=?");

            stmt.setString(1, name);
            stmt.setInt(2, categoryID);
            stmt.setFloat(3, price);
            stmt.setInt(4, qty);
            stmt.setString(5, desc);

            // You need to set the product_id to specify which row to update
            stmt.setInt(6, productId); // You need to replace 'productId' with the actual product ID you want to update

            stmt.executeUpdate();
            model.setRowCount(0);
            showData();
            if (model.getRowCount() > 0) {
                        jtProductList.scrollRectToVisible(jtProductList.getCellRect(model.getRowCount() - 1, 0, true));
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            }
        }

        clear();
        
        JOptionPane.showMessageDialog(this, "Product has been updated successfully");
    }
}
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        if(btnExit.getText().trim().equals("Exit"))
        System.exit(0);
        else
        clear();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jtProductList.getSelectedRow();
        if(selectedIndex == -1){
            JOptionPane.showMessageDialog(this, "Please select a row in the table first");
        }
        else{
            Connection con = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            int result = JOptionPane.showConfirmDialog(this,"Are you sure",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION)
            {
                try {
                    con = DB_Connection.getConnection();
                    stmt=con.prepareStatement("delete from tblproduct where product_id = ?;");
                    int id=Integer.parseInt(jtProductList.getValueAt(selectedIndex, 0).toString());
                    stmt.setInt(1, id);
                    stmt.execute();   
                    model.removeRow(selectedIndex);
                    JOptionPane.showMessageDialog(this, "Product has been removed successfully");
                
                } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                } finally {
                    try {
                        if (rs != null) rs.close();
                        if (stmt != null) stmt.close();
                        if (con != null) con.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                    }
                }
                
            }
            else
            {
                clear();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
private void clear(){
        txtName.setText("");
        txtPrice.setText("");
        txtQty.setValue(0);
        txtDesc.setText("");
        cboCategory.setSelectedIndex(0);
        txtName.requestFocusInWindow();
        btnAdd.setText("Add");
        btnExit.setText("Exit");
    }
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jtProductList.getSelectedRow();
        if(selectedIndex == -1){
            JOptionPane.showMessageDialog(this, "Please select a row in the table first");
        }
        else{
            btnAdd.setText("Update");
            btnExit.setText("Cancel");

            txtName.setText(jtProductList.getValueAt(selectedIndex, 1).toString());
            cboCategory.setSelectedItem(jtProductList.getValueAt(selectedIndex, 2).toString());
            txtPrice.setText(jtProductList.getValueAt(selectedIndex, 3).toString());
            txtQty.setValue(jtProductList.getValueAt(selectedIndex, 4));
            txtDesc.setText(jtProductList.getValueAt(selectedIndex, 5).toString());
        }
    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JComboBox<String> cboCategory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtProductList;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JSpinner txtQty;
    // End of variables declaration//GEN-END:variables
}
