/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.pos_system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class CategoryPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProductPanel
     */
    DefaultTableModel model;
    public CategoryPanel() {
        initComponents();
        model =(DefaultTableModel) jtProductList.getModel();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDesc = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductList = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(700, 528));

        txtDesc.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        btnAdd.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel9.setText("Category Name");

        jLabel10.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel10.setText("Description");

        txtName.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        jtProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Decription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtProductList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(59, 59, 59)
                                .addComponent(txtDesc))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtName)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnEdit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete)
                    .addComponent(btnExit))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showData() {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

        try {
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("SELECT * from tblproductcategory;");

            rs = stmt.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("category_id");
                String name = rs.getString("category_name");
                String desc = rs.getString("description");

                Object[] rowData = {id, name, desc};
                model.addRow(rowData);

            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            }
        }
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        if(txtName.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please Fill in the information");
        }else{
            try {
                if(btnAdd.getText().equals("Add")){
                    String name = txtName.getText().trim();
                    String desc = txtDesc.getText().trim();
                    
                    Connection con = DB_Connection.getConnection();
                    PreparedStatement stmt=con.prepareStatement("INSERT tblproductcategory "
                            + "(category_name, description) "
                            + "VALUES (?,?);");
                    
                    stmt.setString(1, name);
                    stmt.setString(2, desc);
                    
                    stmt.execute();
                    
                    model.setRowCount(0);

                    showData();

                    // After adding or updating data, you can also scroll to the last row
                    if (model.getRowCount() > 0) {
                        jtProductList.scrollRectToVisible(jtProductList.getCellRect(model.getRowCount() - 1, 0, true));
                    }

                    JOptionPane.showMessageDialog(this, "Category has been added successfully");
                    clear();
                }else{
                    UpdateCategory();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed
    private void UpdateCategory() {
    int selectedIndex = jtProductList.getSelectedRow();
    if(selectedIndex != -1){
        Connection con = null;
        PreparedStatement stmt = null;  
        ResultSet rs = null;
        int CategoryID =Integer.parseInt(jtProductList.getValueAt(selectedIndex, 0).toString());
        
        String name = txtName.getText().trim();
        String desc = txtDesc.getText().trim();
        
        try {
        
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("UPDATE tblproductcategory SET category_name=?, description=? WHERE category_id=?");

            stmt.setString(1, name);
            stmt.setString(2, desc);
            stmt.setInt(3, CategoryID); // You need to replace 'productId' with the actual product ID you want to update
            
            stmt.executeUpdate();
            model.setRowCount(0);
            showData();
            if (model.getRowCount() > 0) {
                        jtProductList.scrollRectToVisible(jtProductList.getCellRect(model.getRowCount() - 1, 0, true));
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            }
        }

        clear();
        
        JOptionPane.showMessageDialog(this, "Category has been updated successfully");
        }
    }
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        if(btnExit.getText().trim().equals("Exit"))
        System.exit(0);
        else
        clear();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jtProductList.getSelectedRow();
        if(selectedIndex == -1){
            JOptionPane.showMessageDialog(this, "Please select a row in the table first");
        }
        else{
            int result = JOptionPane.showConfirmDialog(this,"Are you sure",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION)
            {
                try {
                    Connection con = DB_Connection.getConnection();
                    PreparedStatement stmt=con.prepareStatement("delete from tblproductcategory where category_id = ?;");
                    int id=Integer.parseInt(jtProductList.getValueAt(selectedIndex, 0).toString());
                    stmt.setInt(1, id);
                    stmt.execute();   
                    model.removeRow(selectedIndex);
                    JOptionPane.showMessageDialog(this, "Product has been removed successfully");
                
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                clear();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
private void clear(){
        txtName.setText("");
        txtDesc.setText("");
        txtName.requestFocusInWindow();
        btnAdd.setText("Add");
        btnExit.setText("Exit");
    }
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jtProductList.getSelectedRow();
        if(selectedIndex == -1){
            JOptionPane.showMessageDialog(this, "Please select a row in the table first");
        }
        else{
            btnAdd.setText("Update");
            btnExit.setText("Cancel");

            txtName.setText(jtProductList.getValueAt(selectedIndex, 1).toString());
            txtDesc.setText(jtProductList.getValueAt(selectedIndex, 2).toString());

        }
    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtProductList;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
