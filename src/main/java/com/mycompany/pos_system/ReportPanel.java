/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.pos_system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ReportPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProductPanel
     */
    private int getQtyOrderByInvoiceId(int invoiceId){
        int qty=0;
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("""
                select qty_ordered from tblinvoice where invoice_id = ?;""");
            stmt.setInt(1,invoiceId);
                rs = stmt.executeQuery();
                while (rs.next()) {
                    qty = rs.getInt("qty_ordered");
                }
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            } finally {
                try {
                    if (rs != null) rs.close();
                    if (stmt != null) stmt.close();
                    if (con != null) con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                }
            }
        
        return qty;
    }
    private void showData(){
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = DB_Connection.getConnection();
            stmt = con.prepareStatement("""
                select 
                                        i.invoice_id,
                                        customer_name,
                                        product_name,
                                        total_amount,
                                        qty_ordered,
                                        date_recorded,
                                        status
                                        
                                        from tblinvoice i 
                                        left join 
                                        tblcustomer c 
                                        on i.customer_id = c.customer_id
                                        left join
                                        tblsales s
                                        on s.invoice_id = i.invoice_id
                                        left join 
                                        tblproduct p
                                        on p.product_id = s.product_id;""");
                rs = stmt.executeQuery();
                while (rs.next()) {
                    int iid = rs.getInt("invoice_id");
                    String cusname = rs.getString("customer_name");
                    String pname = rs.getString("product_name");
                    Float total = rs.getFloat("total_amount");
                    int qtyordered = rs.getInt("qty_ordered");
                    String dateOrdered = rs.getString("date_recorded");
                    String status = rs.getString("status");

                    Object[] rowData = {iid, cusname, pname, qtyordered, total, dateOrdered, status};

                    model.addRow(rowData);
                }
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            } finally {
                try {
                    if (rs != null) rs.close();
                    if (stmt != null) stmt.close();
                    if (con != null) con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                }
            }
    }
    DefaultTableModel model;
    public ReportPanel() {
        initComponents();
        model =(DefaultTableModel) jtProductList.getModel();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductList = new javax.swing.JTable();
        txtId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 528));

        jtProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sale ID", "Buyer", "Product", "Qty", "Total", "Date Recoreded", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtProductList);
        if (jtProductList.getColumnModel().getColumnCount() > 0) {
            jtProductList.getColumnModel().getColumn(0).setPreferredWidth(60);
            jtProductList.getColumnModel().getColumn(0).setMaxWidth(60);
            jtProductList.getColumnModel().getColumn(1).setPreferredWidth(175);
            jtProductList.getColumnModel().getColumn(2).setPreferredWidth(150);
            jtProductList.getColumnModel().getColumn(3).setPreferredWidth(75);
            jtProductList.getColumnModel().getColumn(4).setPreferredWidth(100);
            jtProductList.getColumnModel().getColumn(4).setMaxWidth(100);
            jtProductList.getColumnModel().getColumn(5).setPreferredWidth(125);
            jtProductList.getColumnModel().getColumn(5).setMaxWidth(125);
            jtProductList.getColumnModel().getColumn(6).setPreferredWidth(75);
        }

        txtId.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        txtId.setMinimumSize(null);

        jLabel9.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel9.setText("Search by date");

        btnSearch.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    String searchDate = txtId.getText().trim(); // Get the search date from the text field
    
    // Check if the search date is empty
    if (searchDate.isEmpty()) {
        model.setRowCount(0);
        showData(); // Show all data and return
        return;
    }

    model.setRowCount(0); // Clear existing rows from the table

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
        con = DB_Connection.getConnection();
        stmt = con.prepareStatement("""
             select 
                i.invoice_id,
                customer_name,
                product_name,
                total_amount,
                qty_ordered,
                date_recorded,
                status
            from tblinvoice i 
            left join 
            tblcustomer c 
            on i.customer_id = c.customer_id
            left join
            tblsales s
            on s.invoice_id = i.invoice_id
            left join 
            tblproduct p
            on p.product_id = s.product_id
            WHERE date_recorded = ?;""");

        stmt.setString(1, searchDate);
        rs = stmt.executeQuery();
        while (rs.next()) {
            int iid = rs.getInt("invoice_id");
            String cusname = rs.getString("customer_name");
            String pname = rs.getString("product_name");
            Float total = rs.getFloat("total_amount");
            int qtyordered = rs.getInt("qty_ordered");
            String dateOrdered = rs.getString("date_recorded");
            String status = rs.getString("status");

            Object[] rowData = {iid, cusname, pname, qtyordered, total, dateOrdered, status};

            model.addRow(rowData);
        }
    } catch (SQLException ex) {
        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
        }
    }

//        if( txtId.getText().equals("")||
//            txtPrice.getText().equals("")||
//            txtQty.getValue().equals("")){
//            JOptionPane.showMessageDialog(this, "Please Fill in the information");
//        }else{
//            Connection con = null;
//            PreparedStatement stmt = null;
//            ResultSet rs = null;
//            try {
//                int categoryID=0;
//                if(btnSearch.getText().equals("Add")){
//                    String name = txtId.getText().trim();
//                    String categoryName = cboCategory.getSelectedItem().toString();
//                    try {
//                        con = DB_Connection.getConnection();
//                        stmt = con.prepareStatement("SELECT category_id FROM tblproductcategory where category_name = ?;");
//                        stmt.setString( 1 , categoryName);
//                        rs = stmt.executeQuery();
//                        while (rs.next()) {
//                            categoryID = rs.getInt("category_id");
//                        }
//                    } catch (SQLException ex) {
//                        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
//                    }
//                    float price = Float.parseFloat(txtPrice.getText().trim());
//                    int qty = Integer.parseInt(txtQty.getValue().toString());
//                    String desc = txtDesc.getText().trim();
//
//                    //                    Connection con=DriverManager.getConnection(
//                        //                    "jdbc:mysql://localhost:3306/pos_system_db","root","");
//                    con = DB_Connection.getConnection();
//                    stmt=con.prepareStatement("INSERT tblproduct (product_name, category_id, unit_price, qty_in_stock,  description) VALUES (?,?,?,?,?);");
//
//                    stmt.setString(1, name);
//                    stmt.setInt(2, categoryID);
//                    stmt.setFloat(3, price);
//                    stmt.setInt(4, qty);
//                    stmt.setString(5, desc);
//
//                    stmt.execute();
//
//                    model.setRowCount(0);
//
//                    showData();
//
//                    // After adding or updating data, you can also scroll to the last row
//                    if (model.getRowCount() > 0) {
//                        jtProductList.scrollRectToVisible(jtProductList.getCellRect(model.getRowCount() - 1, 0, true));
//                    }
//
//                    JOptionPane.showMessageDialog(this, "Product has been added successfully");
//                    clear();
//                }else{
//                    updateProduct();
//                }
//
//            } catch (SQLException ex) {
//                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
//            } finally {
//                try {
//                    if (rs != null) rs.close();
//                    if (stmt != null) stmt.close();
//                    if (con != null) con.close();
//                } catch (SQLException ex) {
//                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
//                }
//            }
//        }
    }//GEN-LAST:event_btnSearchActionPerformed
    private void updateQty(int qtyInStock,int qtyRefunded){
        int selectedIndex = jtProductList.getSelectedRow();
        if(selectedIndex != -1){
            Connection con = null;
            PreparedStatement stmt = null;  
            ResultSet rs = null;
            int productId =Integer.parseInt(jtProductList.getValueAt(selectedIndex, 0).toString());


            try {

                con = DB_Connection.getConnection();
                stmt = con.prepareStatement("UPDATE tblproduct"
                        + " SET qty_in_stock=?"
                        + " WHERE product_id=?");

                stmt.setFloat(1, qtyInStock+qtyRefunded);
                stmt.setInt(2, productId); // You need to replace 'productId' with the actual product ID you want to update

                stmt.executeUpdate();
            } catch (SQLException ex) {
                ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
            } finally {
                try {
                    if (rs != null) rs.close();
                    if (stmt != null) stmt.close();
                    if (con != null) con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                }
            }
        }
    }
    private int findQtyInStock(int productId){
        int selectedIndex = jtProductList.getSelectedRow();
        int qtyInStock=0;
        if(selectedIndex != -1){
            Connection con = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;

                try {
                    con = DB_Connection.getConnection();
                    stmt = con.prepareStatement("SELECT * from tblcustomer;");

                    rs = stmt.executeQuery();
                    while (rs.next()) {
                        int id = rs.getInt("customer_id");
                        String name = rs.getString("customer_name");
                        int age = rs.getInt("age");
                        String gender = rs.getString("gender");
                        String contact = rs.getString("contact");
                        String address = rs.getString("address");

                        Object[] rowData = {id, name, age, gender, contact, address};

                        model.addRow(rowData);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                } finally {
                    try {
                        if (rs != null) rs.close();
                        if (stmt != null) stmt.close();
                        if (con != null) con.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace(); // Handle exception properly, maybe log it or show an error message
                    }
                }
        }
        return qtyInStock;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtProductList;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}